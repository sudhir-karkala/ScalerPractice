package com.scaler.dynamicprogramming;

import java.util.HashMap;
import java.util.Map;

/**
 * Given a string A, find if there is any subsequence that repeats itself.
 * <p>
 * A subsequence of a string is defined as a sequence of characters generated by deleting some
 * characters in the string without changing the order of the remaining characters.
 * <p>
 * NOTE: Sub-sequence length should be greater than or equal to 2.
 * <p>
 * 1 <= length(A) <= 100
 *
 * @author sudhir on 14-Jul-2020
 */
public class RepeatingSubSequence {
    public int anytwo(String A) {
        int n = A.length();
        // freq map of characters
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(A.charAt(i), map.getOrDefault(A.charAt(i), 0) + 1);
            // if the freq of any character is > 2, then RepeatingSubSequence exists.
            if (map.get(A.charAt(i)) > 2) {
                return 1;
            }
        }

        // remove non-repeating characters from the string, i.e. retain only repeating characters
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (map.get(A.charAt(i)) > 1) {
                builder.append(A.charAt(i));
            }
        }

        // check if the resultant string is a palindrome or not.
        int len = builder.length();
        String resultantString = builder.toString();
        if (isPalindrome(resultantString, 0, len - 1)) {
            // check if the resultant string is non-empty(if it is empty, then RepeatingSubSequence doesn't exist.
            if ((len & 1) > 0 && len >= 3) { // means the string is non-empty.
                // this will cover cases like "aaa" where all characters are same resulting in a palindrome, but still
                // RepeatingSubSequence is possible.
                return 1;
            } else {
                // RepeatingSubSequence is not possible
                return 0;
            }
        }
        return 1;
    }

    private boolean isPalindrome(String str, int start, int end) {
        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }

    public static void main(String[] args) {
        RepeatingSubSequence r = new RepeatingSubSequence();
        String s1 = "aab";
        String s2 = "abba";
        String s3 = "abcab";
        String s4 = "xbxaxb";
        String s5 = "abca";
        String s6 = "ababc";
        System.out.println(r.anytwo(s1));
        System.out.println(r.anytwo(s2));
        System.out.println(r.anytwo(s3));
        System.out.println(r.anytwo(s4));
        System.out.println(r.anytwo(s5));
        System.out.println(r.anytwo(s6));
    }
}
